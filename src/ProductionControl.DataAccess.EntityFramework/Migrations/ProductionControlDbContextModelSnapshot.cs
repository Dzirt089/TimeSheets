// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductionControl.DataAccess.EntityFramework.DbContexts;

#nullable disable

namespace ProductionControl.DataAccess.EntityFramework.Migrations
{
    [DbContext(typeof(ProductionControlDbContext))]
    partial class ProductionControlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.ApiModels.Model.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Application")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Machine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrg", b =>
                {
                    b.Property<int>("EmployeeExOrgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeExOrgID"));

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDismissal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentProductionDepartmentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDismissal")
                        .HasColumnType("bit");

                    b.Property<int>("NumCategory")
                        .HasColumnType("int");

                    b.Property<int>("NumberPass")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeExOrgID");

                    b.HasIndex("DepartmentProductionDepartmentID");

                    b.ToTable("EmployeeExOrgs");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrgAddInRegion", b =>
                {
                    b.Property<int>("EmployeeExOrgID")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WorkingInTimeSheetEmployeeExOrg")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeExOrgID", "DepartmentID");

                    b.ToTable("EmployeeExOrgAddInRegions");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeePhoto", b =>
                {
                    b.Property<int>("EmployeeExOrgID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("EmployeeExOrgID");

                    b.ToTable("EmployeePhotos");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.ShiftDataExOrg", b =>
                {
                    b.Property<int>("EmployeeExOrgID")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte?>("CodeColor")
                        .HasColumnType("tinyint");

                    b.Property<string>("Hours")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeExOrgID", "WorkDate", "DepartmentID");

                    b.HasIndex("EmployeeExOrgID", "WorkDate", "DepartmentID")
                        .IsUnique();

                    b.ToTable("ShiftDataExOrgs");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.DepartmentProduction", b =>
                {
                    b.Property<string>("DepartmentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessRight")
                        .HasColumnType("int");

                    b.Property<string>("NameDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentID")
                        .IsUnique();

                    b.ToTable("DepartmentProductions");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.Employee", b =>
                {
                    b.Property<long>("EmployeeID")
                        .HasColumnType("bigint");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDismissal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDismissal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLunch")
                        .HasColumnType("bit");

                    b.Property<string>("NumGraf")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsageNormID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("UsageNormID");

                    b.HasIndex("EmployeeID", "DepartmentID", "NumGraf")
                        .IsUnique()
                        .HasFilter("[NumGraf] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.EmployeeAccessRight", b =>
                {
                    b.Property<int>("EmployeeAccessRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeAccessRightId"));

                    b.Property<string>("DepartmentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NamePeople")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RightEditOrSee")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeAccessRightId");

                    b.HasIndex("DepartmentID")
                        .IsUnique();

                    b.HasIndex("EmployeeAccessRightId", "DepartmentID")
                        .IsUnique();

                    b.ToTable("EmployeeAccessRights");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.OrderNumberOnDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MonthValue")
                        .HasColumnType("int");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("YearValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderNumberOnDates");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.ShiftData", b =>
                {
                    b.Property<long>("EmployeeID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHaveLunch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreHoliday")
                        .HasColumnType("bit");

                    b.Property<string>("Overday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID", "WorkDate");

                    b.HasIndex("EmployeeID", "WorkDate")
                        .IsUnique();

                    b.ToTable("ShiftsData");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.DataSizForMonth", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CountExtradite")
                        .HasColumnType("int");

                    b.Property<long>("EmployeeID")
                        .HasColumnType("bigint");

                    b.Property<double>("LifeTime")
                        .HasColumnType("float");

                    b.Property<int>("SizID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("SizID");

                    b.ToTable("DataSizForMonths");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.IssueSiz", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codeBest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("rcdBest")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("IssueSizs");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.Siz", b =>
                {
                    b.Property<int>("SizID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizID"));

                    b.Property<string>("Article")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizID");

                    b.ToTable("Sizs");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.SizUsageRate", b =>
                {
                    b.Property<int>("SizUsageRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizUsageRateID"));

                    b.Property<double>("HoursPerUnit")
                        .HasColumnType("float");

                    b.Property<int>("SizID")
                        .HasColumnType("int");

                    b.Property<int>("UsageNormID")
                        .HasColumnType("int");

                    b.HasKey("SizUsageRateID");

                    b.HasIndex("SizID");

                    b.HasIndex("UsageNormID");

                    b.ToTable("SizUsageRates");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.UsageNorm", b =>
                {
                    b.Property<int>("UsageNormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsageNormID"));

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsageNormID");

                    b.ToTable("UsageNorms");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrg", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.DepartmentProduction", null)
                        .WithMany("EmployeeExOrgs")
                        .HasForeignKey("DepartmentProductionDepartmentID");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrgAddInRegion", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrg", "EmployeeExOrg")
                        .WithMany("EmployeeExOrgAddInRegions")
                        .HasForeignKey("EmployeeExOrgID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeExOrg");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeePhoto", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrg", "EmployeeExOrg")
                        .WithOne("EmployeePhotos")
                        .HasForeignKey("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeePhoto", "EmployeeExOrgID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeExOrg");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.ShiftDataExOrg", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrg", "EmployeeExOrg")
                        .WithMany("ShiftDataExOrgs")
                        .HasForeignKey("EmployeeExOrgID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeExOrg");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.Employee", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.DepartmentProduction", "DepartmentProduction")
                        .WithMany("EmployeesList")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Departments");

                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.Sizs.UsageNorm", "UsageNorm")
                        .WithMany("Employees")
                        .HasForeignKey("UsageNormID");

                    b.Navigation("DepartmentProduction");

                    b.Navigation("UsageNorm");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.EmployeeAccessRight", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.DepartmentProduction", "DepartmentProduction")
                        .WithOne("EmployeeAccessRight")
                        .HasForeignKey("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.EmployeeAccessRight", "DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartmentProduction");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.ShiftData", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Employees");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.DataSizForMonth", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.Sizs.Siz", "Siz")
                        .WithMany("DataSizForMonths")
                        .HasForeignKey("SizID")
                        .IsRequired();

                    b.Navigation("Siz");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.SizUsageRate", b =>
                {
                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.Sizs.Siz", "Siz")
                        .WithMany("SizUsageRates")
                        .HasForeignKey("SizID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionControl.DataAccess.Classes.EFClasses.Sizs.UsageNorm", "UsageNorm")
                        .WithMany("SizUsageRates")
                        .HasForeignKey("UsageNormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Siz");

                    b.Navigation("UsageNorm");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesExternalOrganizations.EmployeeExOrg", b =>
                {
                    b.Navigation("EmployeeExOrgAddInRegions");

                    b.Navigation("EmployeePhotos");

                    b.Navigation("ShiftDataExOrgs");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.DepartmentProduction", b =>
                {
                    b.Navigation("EmployeeAccessRight")
                        .IsRequired();

                    b.Navigation("EmployeeExOrgs");

                    b.Navigation("EmployeesList");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.EmployeesFactorys.Employee", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.Siz", b =>
                {
                    b.Navigation("DataSizForMonths");

                    b.Navigation("SizUsageRates");
                });

            modelBuilder.Entity("ProductionControl.DataAccess.Classes.EFClasses.Sizs.UsageNorm", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SizUsageRates");
                });
#pragma warning restore 612, 618
        }
    }
}
